{
	"info": {
		"_postman_id": "2bf998a7-5826-4593-88a4-bf7b6162a9ad",
		"name": "Emil",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "get",
			"item": [
				{
					"name": "math.js",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Status code and responce\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    var resp = String(pm.response.text());\r",
									"    const expected = String(pm.variables.get('expected'));\r",
									"    console.log('1: ' + resp);\r",
									"    pm.expect(resp).to.equal(expected);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://api.mathjs.org/v4/?expr={{expr}}&precision={{precision}}",
							"protocol": "http",
							"host": [
								"api",
								"mathjs",
								"org"
							],
							"path": [
								"v4",
								""
							],
							"query": [
								{
									"key": "expr",
									"value": "{{expr}}"
								},
								{
									"key": "precision",
									"value": "{{precision}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "post",
			"item": [
				{
					"name": "math.js",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Status code and response\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    var result = jsonData.result;\r",
									"    var error = jsonData.error;\r",
									"    pm.expect(error).to.equal(null);\r",
									"    const expected = String(pm.variables.get('expected_list'));\r",
									"    console.log('expected: ' + expected);\r",
									"    console.log('result: ' + result);\r",
									"    pm.expect(result).to.equal(expected);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"expr\": \"{{expr_list}}\",\r\n    \"precision\": {{precision}}\r\n}"
						},
						"url": {
							"raw": "http://api.mathjs.org/v4/",
							"protocol": "http",
							"host": [
								"api",
								"mathjs",
								"org"
							],
							"path": [
								"v4",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "negative",
			"item": [
				{
					"name": "missing url parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Status code and responce\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"    var resp = String(pm.response.text());\r",
									"    pm.expect(resp).to.equal(\"Error: Required query parameter \\\"expr\\\" missing in url.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://api.mathjs.org/v4/",
							"protocol": "http",
							"host": [
								"api",
								"mathjs",
								"org"
							],
							"path": [
								"v4",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "not-known function",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Status code and responce\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"    var resp = String(pm.response.text());\r",
									"    pm.expect(resp).to.equal(\"Error: Undefined function absss\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://api.mathjs.org/v4/?expr=absss(3)",
							"protocol": "http",
							"host": [
								"api",
								"mathjs",
								"org"
							],
							"path": [
								"v4",
								""
							],
							"query": [
								{
									"key": "expr",
									"value": "absss(3)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "missing body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Status code and responce\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"    var resp = String(pm.response.text());\r",
									"    pm.expect(resp).to.equal(\"Error: Required field \\\"expr\\\" missing in JSON body. Did you sent a header \\\"content-type: application/json\\\"?\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://api.mathjs.org/v4/",
							"protocol": "http",
							"host": [
								"api",
								"mathjs",
								"org"
							],
							"path": [
								"v4",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "check encoding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Status code and responce\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"    var resp = String(pm.response.text());\r",
									"    pm.expect(resp).to.equal(\"Error: Unexpected part \\\"1\\\" (char 3)\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://api.mathjs.org/v4/?expr=1+1",
							"protocol": "http",
							"host": [
								"api",
								"mathjs",
								"org"
							],
							"path": [
								"v4",
								""
							],
							"query": [
								{
									"key": "expr",
									"value": "1+1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "datasetSize",
			"value": ""
		},
		{
			"key": "expr",
			"value": ""
		},
		{
			"key": "precision",
			"value": ""
		},
		{
			"key": "expected",
			"value": ""
		}
	]
}